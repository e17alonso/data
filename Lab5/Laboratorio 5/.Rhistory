fechas_inicio <- c(3, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12)
fechas_fin <- c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12)
nombres_signos <- c("Aries", "Tauro", "Géminis", "Cáncer", "Leo", "Virgo",
"Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis")
# Determinar el signo zodiacal
for (i in 1:length(nombres_signos)) {
if ((mes == fechas_inicio[i] && dia >= 21) || (mes == fechas_fin[i] && dia <= 20)) {
return(nombres_signos[i])
}
}
# Si la fecha de nacimiento no corresponde a ningún signo, devuelve NA
return(NA)
}
# Ejemplo de uso
fecha_nacimiento <- as.Date("17-02-2002")  # Cambia la fecha de nacimiento según la tuya
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
obtener_signo_zodiacal <- function(fecha_nacimiento) {
signos <- c("Capricornio", "Acuario", "Piscis", "Aries", "Tauro", "Géminis",
"Cáncer", "Leo", "Virgo", "Libra", "Escorpio", "Sagitario")
fechas_inicio <- as.Date(c("2000-12-22", "2000-01-21", "2000-02-20", "2000-03-21",
"2000-04-21", "2000-05-22", "2000-06-22", "2000-07-23",
"2000-08-24", "2000-09-24", "2000-10-24", "2000-11-23"))
fecha_nacimiento <- as.Date(fecha_nacimiento)
if (is.na(fecha_nacimiento)) {
return("Fecha de nacimiento inválida")
}
signo <- signos[which.max(fecha_nacimiento >= fechas_inicio)]
return(signo)
}
# Ejemplo de uso
fecha_nacimiento <- "2002-02-17"  # Cambia la fecha de nacimiento según la tuya
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
obtener_signo_zodiacal <- function(fecha_nacimiento) {
signos <- c("Capricornio", "Acuario", "Piscis", "Aries", "Tauro", "Géminis",
"Cáncer", "Leo", "Virgo", "Libra", "Escorpio", "Sagitario")
# Crear un vector con las fechas de inicio de cada signo zodiacal (en formato MMDD)
fechas_inicio <- c(1222, 1220, 0219, 0321, 0420, 0521, 0621, 0723, 0823, 0923, 1023, 1122)
# Obtener el mes y el día de nacimiento
mes <- as.integer(format(fecha_nacimiento, "%m"))
dia_mes <- as.integer(format(fecha_nacimiento, "%d%m"))
# Determinar el signo zodiacal
if (dia_mes >= fechas_inicio[12] || dia_mes < fechas_inicio[1]) {
return(signos[1])  # Capricornio
} else {
for (i in 2:12) {
if (dia_mes >= fechas_inicio[i - 1] && dia_mes < fechas_inicio[i]) {
return(signos[i])
}
}
}
return("Fecha de nacimiento inválida")
}
# Ejemplo de uso
fecha_nacimiento <- as.Date("2002-02-17")  # Cambia la fecha de nacimiento según la tuya
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
obtener_signo_zodiacal <- function(fecha_nacimiento) {
# Define las fechas de inicio de cada signo zodiacal (en formato mes y día)
fechas_inicio <- c(321, 421, 521, 621, 722, 823, 923, 1023, 1122, 1222, 1231)
signos <- c("Aries", "Tauro", "Géminis", "Cáncer", "Leo", "Virgo",
"Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis")
# Convierte la fecha de nacimiento a un número de mes y día en formato MMDD
fecha_numero <- as.numeric(format(fecha_nacimiento, "%m%d"))
# Compara con las fechas de inicio y determina el signo
for (i in 1:length(fechas_inicio)) {
if (fecha_numero <= fechas_inicio[i]) {
return(signos[i])
}
}
# Si la fecha de nacimiento es después del 31 de diciembre, el signo es Capricornio
return("Capricornio")
}
# Ejemplo de uso
fecha_nacimiento <- as.Date("2002-02-17")  # Cambia la fecha de nacimiento según la tuya
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
obtener_signo_zodiacal <- function(fecha_nacimiento) {
signos <- c("Capricornio", "Acuario", "Piscis", "Aries", "Tauro", "Géminis",
"Cáncer", "Leo", "Virgo", "Libra", "Escorpio", "Sagitario")
fechas_inicio <- c(as.Date("2000-12-22"), as.Date("2000-01-21"), as.Date("2000-02-20"),
as.Date("2000-03-21"), as.Date("2000-04-21"), as.Date("2000-05-22"),
as.Date("2000-06-22"), as.Date("2000-07-23"), as.Date("2000-08-24"),
as.Date("2000-09-24"), as.Date("2000-10-24"), as.Date("2000-11-23"))
fecha_nacimiento <- as.Date(fecha_nacimiento)
if (is.na(fecha_nacimiento)) {
return("Fecha de nacimiento inválida")
}
if (fecha_nacimiento >= as.Date("2000-12-22") || fecha_nacimiento < as.Date("2000-01-21")) {
return(signos[1])  # Capricornio
}
for (i in 2:12) {
if (fecha_nacimiento >= fechas_inicio[i] && fecha_nacimiento < fechas_inicio[i + 1]) {
return(signos[i])
}
}
return("Fecha de nacimiento inválida")
}
# Ejemplo de uso
fecha_nacimiento <- as.Date("2002-02-17")  # Cambia la fecha de nacimiento según la tuya
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
obtener_signo_zodiacal <- function(fecha_nacimiento) {
# Define las fechas de inicio de cada signo zodiacal (en formato mes y día)
fechas_inicio <- c(320, 420, 520, 620, 721, 822, 922, 1022, 1122, 1221, 1231)
signos <- c("Aries", "Tauro", "Géminis", "Cáncer", "Leo", "Virgo",
"Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis")
# Convierte la fecha de nacimiento a un número de mes y día en formato MMDD
fecha_numero <- as.integer(format(fecha_nacimiento, "%m%d"))
# Compara con las fechas de inicio y determina el signo
for (i in 1:length(fechas_inicio)) {
if (fecha_numero >= fechas_inicio[i]) {
return(signos[i])
}
}
# Si la fecha de nacimiento es después del 31 de diciembre, el signo es Capricornio
return("Capricornio")
}
# Ejemplo de uso
fecha_nacimiento <- as.Date("2002-02-17")  # Cambia la fecha de nacimiento según la tuya
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
obtener_signo_zodiacal <- function(fecha_nacimiento) {
# Define las fechas de inicio de cada signo zodiacal (en formato mes y día)
fechas_inicio <- c(321, 421, 521, 621, 722, 823, 923, 1023, 1122, 1222, 1231)
signos <- c("Aries", "Tauro", "Géminis", "Cáncer", "Leo", "Virgo",
"Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis")
# Convierte la fecha de nacimiento a un número de mes y día en formato MMDD
fecha_numero <- as.numeric(format(fecha_nacimiento, "%m%d"))
# Compara con las fechas de inicio y determina el signo
for (i in 1:length(fechas_inicio)) {
if (fecha_numero <= fechas_inicio[i]) {
return(signos[i])
}
}
# Si la fecha de nacimiento es después del 31 de diciembre, el signo es Capricornio
return("Capricornio")
}
# Ejemplo de uso
fecha_nacimiento <- as.Date("2002-02-17")  # Cambia la fecha de nacimiento según la tuya
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
obtener_signo_zodiacal <- function(fecha_nacimiento) {
fechas_inicio <- c(321, 421, 521, 621, 722, 823, 923, 1023, 1122, 1222, 1231)
signos <- c("Aries", "Tauro", "Géminis", "Cáncer", "Leo", "Virgo",
"Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis")
fecha_numero <- as.numeric(format(fecha_nacimiento, "%m%d"))
for (i in 1:length(fechas_inicio)) {
if (fecha_numero <= fechas_inicio[i]) {
return(signos[i])
}
}
return("Capricornio")
}
fecha_nacimiento <- as.Date("2002-02-17")
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
obtener_signo_zodiacal <- function(fecha_nacimiento) {
fechas_inicio <- c(321, 421, 521, 621, 722, 823, 923, 1023, 1122, 1222, 1231)
signos <- c("Aries", "Tauro", "Géminis", "Cáncer", "Leo", "Virgo",
"Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis")
fecha_numero <- as.numeric(format(fecha_nacimiento, "%m%d"))
for (i in 1:length(fechas_inicio)) {
if (fecha_numero <= fechas_inicio[i]) {
return(signos[i])
}
}
return("Capricornio")
}
fecha_nacimiento <- as.Date("2002-04-17")
signo <- obtener_signo_zodiacal(fecha_nacimiento)
cat("Tu signo zodiacal es:", signo, "\n")
# Importar la librería nycflights13
library(nycflights13)
# Seleccionar las variables de interés
flights <- flights %>% select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Importar la librería nycflights13
library(nycflights13)
library(dplyr)
# Seleccionar las variables de interés
flights <- flights %>% select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>% mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>% mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
# Calcular el delay total
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
# Visualizar los resultados
head(flights)
# Calcular el delay total
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
flight$delay_total
flights$delay_total
# Calcular el delay de la salida y la llegada
flights %>%
mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
) %>%
mutate(
delay_total = dep_delay + arr_delay
)
# Calcular el delay de la salida y la llegada
flights %>%
mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
) %>%
mutate(
delay_total = dep_delay + arr_delay
) %>%
select(delay_total)
# Importar la librería nycflights13
library(nycflights13)
library(dplyr)
flights = flights %>% select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>% mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>% mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
# Calcular el delay total
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
# Visualizar los resultados
head(flights)
setwd("C:/Users/Alonso/data/Lab5/Laboratorio 5")
library(nycflights13)
library(dplyr)
flights = flights %>% select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>% mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>% mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
# Calcular el delay total
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
# Visualizar los resultados
print(flights)
print(flights$delay_total)
# Instalar y cargar la librería nycflights13
if (!requireNamespace("nycflights13", quietly = TRUE)) {
install.packages("nycflights13")
}
library(nycflights13)
# Cargar la tabla flights
data("flights")
# Transformar las columnas de tiempo en formato fecha y hora
flights$dep_datetime <- as.POSIXct(strptime(as.character(flights$dep_time), format = "%H%M"), format = "%Y-%m-%d %H:%M")
flights$arr_datetime <- as.POSIXct(strptime(as.character(flights$arr_time), format = "%H%M"), format = "%Y-%m-%d %H:%M")
flights$sched_dep_datetime <- as.POSIXct(strptime(as.character(flights$sched_dep_time), format = "%H%M"), format = "%Y-%m-%d %H:%M")
flights$sched_arr_datetime <- as.POSIXct(strptime(as.character(flights$sched_arr_time), format = "%H%M"), format = "%Y-%m-%d %H:%M")
# Calcular el retraso de salida (departure delay)
flights$dep_delay <- flights$dep_time - flights$sched_dep_time
# Calcular el retraso de llegada (arrival delay)
flights$arr_delay <- flights$arr_time - flights$sched_arr_time
# Calcular el retraso total
flights$total_delay <- flights$dep_delay + flights$arr_delay
# Ver las primeras filas de la tabla flights con las nuevas columnas
head(flights)
# Importar la librería nycflights13
library(nycflights13)
library(dplyr)
# Seleccionar las variables de interés
flights <- flights %>% select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>% mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>% mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
# Calcular el delay total
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
# Visualizar los resultados
head(flights)
# Importar la librería nycflights13
library(nycflights13)
library(dplyr)
# Seleccionar las variables de interés
flights <- flights %>% select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>% mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>% mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
# Calcular el delay total
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
# Visualizar los resultados
head(flights)
print(flights$delay_total)
# Importar la librería nycflights13
library(nycflights13)
library(dplyr)
# Seleccionar las variables de interés
flights <- flights %>% select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>% mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>% mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
# Calcular el delay total
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
# Visualizar los resultados
head(flights)
print(flights$delay_total)
library(nycflights13)
library(dplyr)
flights = flights %>%
select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>%
mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>%
mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
#Calcular delay total
flights <- flights %>%
mutate(
delay_total = dep_delay + arr_delay
)
# Calcular el delay total de todos los vuelos
delay_total <- flights %>% summarise(delay_total = sum(delay_total))
library(nycflights13)
library(dplyr)
flights = flights %>%
select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>%
mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>%
mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
#Calcular delay total
flights <- flights %>%
mutate(
delay_total = dep_delay + arr_delay
)
head(flights)
library(nycflights13)
library(dplyr)
flights = flights %>%
select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>%
mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>%
mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
# Calcular el delay total de cada vuelo
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
# Visualizar los resultados
flights %>% select(origin, dest, delay_total) %>% head()
# Visualizar los resultados
flights %>% select(delay_total) %>% head()
library(nycflights13)
library(dplyr)
flights = flights %>%
select(dep_time, arr_time, sched_dep_time, sched_arr_time)
# Convertir las variables de hora a formato fecha y hora
flights <- flights %>%
mutate(
dep_time_dt = as.POSIXct(dep_time, format = "%H%M"),
arr_time_dt = as.POSIXct(arr_time, format = "%H%M"),
sched_dep_time_dt = as.POSIXct(sched_dep_time, format = "%H%M"),
sched_arr_time_dt = as.POSIXct(sched_arr_time, format = "%H%M")
)
# Calcular el delay de la salida y la llegada
flights <- flights %>%
mutate(
dep_delay = dep_time_dt - sched_dep_time_dt,
arr_delay = arr_time_dt - sched_arr_time_dt
)
# Calcular el delay total de cada vuelo
flights <- flights %>% mutate(
delay_total = dep_delay + arr_delay
)
head(flights)
# Instalar y cargar la librería nycflights13
if (!requireNamespace("nycflights13", quietly = TRUE)) {
install.packages("nycflights13")
}
library(nycflights13)
# Cargar la tabla flights
data("flights")
# Transformar las columnas de tiempo en formato fecha y hora
flights$dep_datetime <- as.POSIXct(strptime(as.character(flights$dep_time), format = "%H%M"), format = "%Y-%m-%d %H:%M")
flights$arr_datetime <- as.POSIXct(strptime(as.character(flights$arr_time), format = "%H%M"), format = "%Y-%m-%d %H:%M")
flights$sched_dep_datetime <- as.POSIXct(strptime(as.character(flights$sched_dep_time), format = "%H%M"), format = "%Y-%m-%d %H:%M")
flights$sched_arr_datetime <- as.POSIXct(strptime(as.character(flights$sched_arr_time), format = "%H%M"), format = "%Y-%m-%d %H:%M")
# Calcular el retraso de salida (departure delay)
flights$dep_delay <- flights$dep_time - flights$sched_dep_time
# Calcular el retraso de llegada (arrival delay)
flights$arr_delay <- flights$arr_time - flights$sched_arr_time
# Calcular el retraso total
flights$total_delay <- flights$dep_delay + flights$arr_delay
# Ver las primeras filas de la tabla flights con las nuevas columnas
head(flights)
flights$sched_dep_datetime
flights %>%
select(sched_dep_datetime)
# Instalar y cargar la librería nycflights13
if (!requireNamespace("nycflights13", quietly = TRUE)) {
install.packages("nycflights13")
}
library(nycflights13)
# Cargar la tabla flights
data("flights")
# Función para convertir números de hora en formato POSIXct
convert_to_datetime <- function(time, date) {
# Agregar ceros a la izquierda si es necesario
time <- sprintf("%04d", time)
# Crear una cadena de fecha y hora completa
datetime_str <- paste(date, time, sep = "")
# Convertir a formato POSIXct
datetime <- as.POSIXct(datetime_str, format = "%Y%m%d%H%M", tz = "UTC")
return(datetime)
}
# Convertir las columnas de tiempo en formato POSIXct
flights$dep_datetime <- convert_to_datetime(flights$dep_time, flights$date)
flights$arr_datetime <- convert_to_datetime(flights$arr_time, flights$date)
flights$sched_dep_datetime <- convert_to_datetime(flights$sched_dep_time, flights$date)
flights$sched_arr_datetime <- convert_to_datetime(flights$sched_arr_time, flights$date)
# Calcular el retraso de salida (departure delay)
flights$dep_delay <- flights$dep_time - flights$sched_dep_time
# Calcular el retraso de llegada (arrival delay)
flights$arr_delay <- flights$arr_time - flights$sched_arr_time
# Calcular el retraso total
flights$total_delay <- flights$dep_delay + flights$arr_delay
flights %>%
select(dep_datetime)
